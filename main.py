import asyncio
import json
import logging
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

API_TOKEN = os.getenv("BOT_TOKEN")
PSYCHOLOG_ID = int(os.getenv("PSYCHOLOG_ID"))
user_data_file = "user_data.json"
session_data_file = "sessions.json"

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

active_sessions = {}
user_data = {}

start_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start_session")]
])

final_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤(–∞) –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url="https://t.me/psycenter_support_bot")]
])

def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_data = load_json(user_data_file)
active_sessions = load_json(session_data_file)

@dp.message(CommandStart())
async def start(message: Message):
    user_id = str(message.from_user.id)
    last_used = user_data.get(user_id)
    now = datetime.utcnow()

    if last_used:
        last_used_time = datetime.fromisoformat(last_used)
        if now - last_used_time < timedelta(days=30):
            await message.answer("–¢—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è(-–∞—Å—å) –±–æ—Ç–æ–º –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¶–µ–Ω—Ç—Ä–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏: —ç—Ç–æ –Ω–µ —Å–ª—É–∂–±–∞ —Å–ø–∞—Å–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É 112.\n\n–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚Äî –Ω–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª.",
        reply_markup=start_button
    )

@dp.callback_query(F.data == "start_session")
async def handle_session_start(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    now = datetime.utcnow()
    user_data[user_id] = now.isoformat()
    save_json(user_data_file, user_data)

    await callback.message.answer("–û–∂–∏–¥–∞–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞...")

    await bot.send_message(
        PSYCHOLOG_ID,
        f"üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {callback.from_user.full_name} (@{callback.from_user.username})\nID: {callback.from_user.id}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"admin_start_{user_id}")]]
        )
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_start_"))
async def admin_start(callback: CallbackQuery):
    if callback.from_user.id != PSYCHOLOG_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    client_id = int(callback.data.replace("admin_start_", ""))
    active_sessions[str(client_id)] = {
        "start_time": datetime.utcnow().isoformat(),
        "warned": False
    }
    save_json(session_data_file, active_sessions)

    await bot.send_message(client_id, "üîî –ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback.answer("–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å")

@dp.message()
async def forward_message(message: Message):
    user_id = str(message.from_user.id)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}")

    if user_id == str(PSYCHOLOG_ID) and message.reply_to_message:
        lines = message.reply_to_message.text.splitlines()
        for line in lines:
            if line.startswith("ID: "):
                try:
                    client_id = int(line.split("ID: ")[1].split(":")[0])
                    await bot.send_message(client_id, message.text)
                    return
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    if user_id not in active_sessions:
        await message.answer("–°–µ—Å—Å–∏—è –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥.")
        return

    await bot.send_message(
        PSYCHOLOG_ID,
        f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (@{message.from_user.username})\nID: {user_id}:\n{message.text}"
    )

    session = active_sessions[user_id]
    start_time = datetime.fromisoformat(session["start_time"])
    elapsed = datetime.utcnow() - start_time

    if elapsed > timedelta(minutes=25) and not session["warned"]:
        await bot.send_message(user_id, "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
        session["warned"] = True
        save_json(session_data_file, active_sessions)

    if elapsed > timedelta(minutes=30):
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –ù–∞–¥–µ–µ–º—Å—è, —Ç–µ–±–µ —Å—Ç–∞–ª–æ —Ö–æ—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\nüí¨ –ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!", reply_markup=final_button)
        del active_sessions[user_id]
        save_json(session_data_file, active_sessions)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))